

script.js:

///// List of upgrades that should trigger truncation
const keyUpgrades = ['The Finale', 'Agent Smith', 'Shao Kahn', 'Darth Vader', 'Isshin', 'Sauron','Kratos'];

// Function to update the upgrade list display
function updateUpgradeList() {
    // Limit the display to the top 8 upgrades
    let topUpgrades = availableUpgrades.slice(0, 8);

    // Find the first occurrence of any key upgrade in the list
    const truncateIndex = topUpgrades.findIndex(upgrade => keyUpgrades.includes(upgrade.name));

    // Truncate the list if any key upgrade is found
    if (truncateIndex !== -1) {
        topUpgrades = topUpgrades.slice(0, truncateIndex + 1);
    }

    const upgradeList = document.getElementById('upgradeList');
    upgradeList.innerHTML = ''; // Clear the current upgrade list



///// REMOVE ALL MENTIONS OF knowledgeGenerationStarted, and change the below to this:

    // Check if delusion drops below negative 1 trillion to start generating Knowledge
    if ((delusion < -1e12 || knowledgeGenerationSkill) && knowledgePerSecond === 0) {
        knowledgePerSecond = 0.000001
        effectiveKnowledgePerSecond = knowledgePerSecond * totalMultiplier * (bigCrunchMultiplier**(1/2));

        if (!knowledgeGenerationSkill) {
            showMessageModal('The Age of Knowledge', `As you cross the threshold of -1 trillion delusion, the dense fog of confusion and distorted thoughts begins to lift. A sense of clarity pierces through the haze, revealing a world beyond the familiar chaos. The swirling mists part to unveil a luminous realm, shimmering with the light of hidden truths. For the first time, you feel a profound shift within, as the once insurmountable delusion gives way to the dawning of true knowledge. This newfound awareness pulses with a quiet intensity, each revelation a stepping stone towards deeper understanding. Your journey through the labyrinth of the mind has led to this pivotal moment, where the pursuit of enlightenment begins. Your mind expands, absorbing the essence of ancient wisdom and universal secrets, setting the stage for a transformative quest that transcends the ordinary limits of perception.`, false, false);
        }
    }



///// ADD isFight to every time addPurchasedUpgrade is called

addPurchasedUpgrade(upgrade.img, upgrade.name, upgrade.earnings, upgrade.isGodMode, upgrade.isPUGodMode, upgrade.message, upgrade.isFight);



///// reset variables in RestartGame (full restart)

playerAttackSpeed = 2;
powerSurgeMultiplier = 1; //also define variable at top

// Reset power hall skills
powerHallSkills.forEach(skill => {
    skill.unlocked = false;
});



/////  BUG FIX FOR FIGHTING ON MOBILE:

let isFightInProgress = false; // Flag to prevent multiple fight triggers

// Function to handle the purchase of an upgrade
async function buyUpgrade(encodedUpgradeName, callUpdatesAfterBuying = true) {
    // If a fight is in progress, don't allow buying another upgrade
    if (isFightInProgress) return;

    // Decode the upgrade name
    const upgradeName = decodeName(encodedUpgradeName);
    // Find the upgrade object by its name in the available upgrades list
    const upgrade = availableUpgrades.find(up => up.name === upgradeName);

    console.log(`buyUpgrade(${upgradeName})`);
    // If the upgrade is not found, log an error and return
    if (!upgrade) {
        console.error(`Upgrade not found: ${upgradeName}`);
        return;
    }

    // Destructure the upgrade object to get its properties
    const { cost, earnings, img, name, message, miniPrestigeMultiplier, isFight } = upgrade;

    // Check if the player has enough resources to purchase the upgrade
    if (isAffordable(cost)) {
        // Deduct the cost from the player's resources
        copium -= cost.copium || 0;
        delusion -= cost.delusion || 0;
        yachtMoney -= cost.yachtMoney || 0;
        trollPoints -= cost.trollPoints || 0;
        hopium -= cost.hopium || 0;
        knowledge -= cost.knowledge || 0;
        power -= cost.power || 0;
        serenity -= cost.serenity || 0;

        // Special case for the "Antimatter Dimension" upgrade
        if (isFight) {
            isFightInProgress = true; // Set the flag to prevent multiple fight triggers

            const fightResult = await startFightGame(name, img);
            isFightInProgress = false; // Reset the flag after the fight ends

            if (!fightResult) {
                showMessageModal('You Lost', `Defeat isn’t the end, ${name} just tested your limits. Get back up and come back stronger!`);
                saveGameState();
                return;
            }
        }

        // Increase the per second earnings for each resource, apply God Mode multiplier if applicable
        const multiplier = (upgrade.isGodMode && upgrade.isPUGodMode) ? 100 :
            (upgrade.isGodMode || upgrade.isPUGodMode) ? 10 : 1;
        copiumPerSecond += (earnings.copiumPerSecond || 0) * multiplier;
        yachtMoneyPerSecond += (earnings.yachtMoneyPerSecond || 0) * multiplier;
        trollPointsPerSecond += (earnings.trollPointsPerSecond || 0) * multiplier;
        hopiumPerSecond += (earnings.hopiumPerSecond || 0) * multiplier;
        knowledgePerSecond += (earnings.knowledgePerSecond || 0) * multiplier;
        serenityPerSecond += (earnings.serenityPerSecond || 0) * multiplier;

        // Handle delusion per second based on the toggle state
        if (document.getElementById('toggleDelusionLabel').classList.contains('hidden')) {
            // If the toggleDelusion is hidden, add delusion per second normally
            delusionPerSecond += (earnings.delusionPerSecond || 0) * multiplier;
        } else {
            // If the toggleDelusion is not hidden, adjust delusion per second based on the toggle state
            const toggleDelusion = document.getElementById('toggleDelusion').checked;
            const delusionChange = Math.abs(earnings.delusionPerSecond || 0) * multiplier;
            delusionPerSecond += toggleDelusion ? delusionChange : -delusionChange;
        }

        // Add the purchased upgrade to the display
        addPurchasedUpgrade(img, name, earnings, upgrade.isGodMode, upgrade.isPUGodMode, upgrade.message, upgrade.isFight);
        // Remove the upgrade from the available upgrades list
        availableUpgrades.splice(availableUpgrades.indexOf(upgrade), 1);
        // Add the upgrade to the purchased upgrades list
        purchasedUpgrades.push(upgrade);

        // Special case for unlocking the "Cookie Clicker" upgrade
        if (name === "Cookie Clicker") {
            document.getElementById('cookieButton').style.display = 'block';
        }

        // Special case for unlocking the "Transcendence" upgrade
        if (name === "Transcendence") {
            unlockTranscendence();
        }

        // Check if the upgrade message has been shown before
        const messageShownUpgrades = JSON.parse(localStorage.getItem('messageShownUpgrades')) || [];
        const isFirstPurchase = !messageShownUpgrades.includes(name);

        // Show a message if the upgrade has one and it's the first purchase
        if (message && isFirstPurchase) {
            if (message.startsWith('imgs/modal_imgs/')) {
                showMessageModal(name, '', false, false, message);
            } else {
                showMessageModal(name, message);
            }
            messageShownUpgrades.push(name);
            localStorage.setItem('messageShownUpgrades', JSON.stringify(messageShownUpgrades));
        }

        // Special case for the "Antimatter Dimension" upgrade
        if (name === "Antimatter Dimensions") {
            unhideKnowledge();
        }

        // Special case for the "Still very stupid" upgrade
        if (name === "Sauron") {
            showMessageModal('Sadly', "This marks the end of v0.855, but your adventure is far from over! The Hall of Power is just the beginning, and there’s so much more to uncover. Each update brings new challenges and excitement, so stay tuned for what's coming next.<br><br>As you explore the Hall of Power and take on epic battles, I'd love to hear how you're enjoying them. How's the action? Are the battles keeping you on your toes? Your feedback is crucial in shaping the future of the game.<br><br>Join our vibrant Discord community to share your experiences, swap strategies, and help evolve the game. The next big update is just days away, but in the meantime, why not restart the game? Try new tactics, speed runs, and uncover hidden secrets on your path to ultimate power.<br><br>Your thoughts on the battles and the Hall of Power would be invaluable, so feel free to share on Discord or through the feedback form in settings. Let's continue this journey together and see where the Hall of Power leads us next!");
        }

        // Apply a mini prestige multiplier if the upgrade has one
        if (miniPrestigeMultiplier) {
            epsMultiplier *= miniPrestigeMultiplier;
        }

        if (callUpdatesAfterBuying) {
            // Update the upgrade list and display
            updateUpgradeList();
            updateMultipliersDisplay();
            updateEffectiveMultipliers();
            updateDisplay();
            // Save the game state
            saveGameState();
        }

    } else {
        const button = document.querySelector(`button[data-upgrade-name="${encodedUpgradeName}"]`);
        showStatusMessage(button, 'Insufficient resources to purchase this upgrade.', false, 1500);
    }
}




///// knowledgeable cookie bug:


if (cookieKnowledgeable){
    knowledge += Math.max(cookieClickMultiplier * totalMultiplier, effectiveKnowledgePerSecond/2);
}



///// no negative knowledge:

function calculateEffectivePower(){
    return (moneyIsPowerTooSkill ? (Math.max(knowledge,0) ** (1/3) / 1e12) * (1 + (Math.max(yachtMoney,0) ** (1/30) / 100)) : Math.max(knowledge,0) ** (1/3) / 1e12) * powerSurgeMultiplier * devMultiplier;
}



///// diminishing power scaling

function calculateBasePower() {
    return (moneyIsPowerTooSkill ?
        (Math.max(knowledge, 0) ** (1/3) / 1e12) * (1 + (Math.max(yachtMoney, 0) ** (1/30) / 100)) 
        : Math.max(knowledge, 0) ** (1/3) / 1e12) 
        * powerSurgeMultiplier * devMultiplier;
}

function calculateEffectivePower() {
    // Calculate the base power generation
    const basePower = calculateBasePower()

    // If basePower is zero, return 0 to prevent division errors
    if (basePower === 0) {
        return 0;
    }

    const powerGeneratedIn2Hours = basePower * 2 * 3600;  // Power generated in 2 hours (2 * 3600 seconds)
    
    // Check how much power the player currently has
    const extraPower = Math.max(power - powerGeneratedIn2Hours, 0);

    // Calculate the diminishing multiplier, scaling as soon as it goes over 2 hours
    const diminishingMultiplier = Math.max(0.05, 0.95 ** (extraPower / powerGeneratedIn2Hours)); 

    // Return the effective power considering the diminishing multiplier
    return basePower * diminishingMultiplier;
}

function calculateBaseKnowledge() {
    return knowledgePerSecond * totalMultiplier * (bigCrunchMultiplier ** (1/2));
}

function calculateEffectiveKnowledge() {
    // Calculate the base knowledge generation
    const baseKnowledge = calculateBaseKnowledge();

    // If baseKnowledge is zero, return 0 to prevent division errors
    if (baseKnowledge === 0) {
        return 0;
    }

    const knowledgeGeneratedIn2Hours = baseKnowledge * 2 * 3600;  // Knowledge generated in 2 hours (2 * 3600 seconds)

    // Check how much knowledge the player currently has
    const extraKnowledge = Math.max(knowledge - knowledgeGeneratedIn2Hours, 0);

    // Calculate the diminishing multiplier, scaling as soon as it goes over 2 hours
    const diminishingMultiplier = Math.max(0.05, 0.95 ** (extraKnowledge / knowledgeGeneratedIn2Hours)); 

    // Return the effective knowledge considering the diminishing multiplier
    return baseKnowledge * diminishingMultiplier;
}

// Function to generate idle resources based on the elapsed time
function generateIdleResources(elapsedSeconds) {
    // Increase resources based on their effective per second values and the elapsed time
    copium += effectiveCopiumPerSecond * elapsedSeconds;
    delusion += effectiveDelusionPerSecond * elapsedSeconds;
    yachtMoney += effectiveYachtMoneyPerSecond * elapsedSeconds;
    trollPoints += effectiveTrollPointsPerSecond * elapsedSeconds;
    hopium += effectiveHopiumPerSecond * elapsedSeconds;
    serenity += effectiveSerenityPerSecond * elapsedSeconds;

    const baseKnowledgePerSecond = calculateBaseKnowledge();

    if (baseKnowledgePerSecond > 0) {

        const knowledgeGeneratedIn2Hours = baseKnowledgePerSecond * 2 * 3600;  // Knowledge generated in 2 hours (2 * 3600 seconds)

        // Calculate the current diminishing multiplier based on the initial hoarded knowledge
        const initialExtraKnowledge = Math.max(knowledge - knowledgeGeneratedIn2Hours, 0);
        const initialDiminishingMultiplier = Math.max(0.05, 0.95 ** (initialExtraKnowledge / knowledgeGeneratedIn2Hours));

        // Calculate the knowledge generation for the current state
        const initialKnowledgeGenerated = baseKnowledgePerSecond * initialDiminishingMultiplier * elapsedSeconds;

        // If the player hoards more knowledge, we adjust the multiplier accordingly for the remainder
        const finalExtraKnowledge = Math.max((knowledge + initialKnowledgeGenerated) - knowledgeGeneratedIn2Hours, 0);
        const finalDiminishingMultiplier = Math.max(0.05, 0.95 ** (finalExtraKnowledge / knowledgeGeneratedIn2Hours));

        // Calculate the average diminishing multiplier over the elapsed time
        const averageDiminishingMultiplier = (initialDiminishingMultiplier + finalDiminishingMultiplier) / 2;

        // Calculate total knowledge generated considering the average diminishing multiplier
        knowledge += baseKnowledgePerSecond * averageDiminishingMultiplier * elapsedSeconds;
    }

    const basePowerPerSecond = calculateBasePower();

    if (basePowerPerSecond > 0) {

        const powerGeneratedIn2Hours = basePowerPerSecond * 2 * 3600;  // Power generated in 2 hours (2 * 3600 seconds)

        // Calculate the current diminishing multiplier based on the initial hoarded power
        const initialExtraPower = Math.max(power - powerGeneratedIn2Hours, 0);
        const initialDiminishingMultiplier = Math.max(0.05, 0.95 ** (initialExtraPower / powerGeneratedIn2Hours));

        // Calculate the power generation for the current state
        const initialPowerGenerated = basePowerPerSecond * initialDiminishingMultiplier * elapsedSeconds;

        // If the player hoards more power, we adjust the multiplier accordingly for the remainder
        const finalExtraPower = Math.max((power + initialPowerGenerated) - powerGeneratedIn2Hours, 0);
        const finalDiminishingMultiplier = Math.max(0.05, 0.95 ** (finalExtraPower / powerGeneratedIn2Hours));

        // Calculate the average diminishing multiplier over the elapsed time
        const averageDiminishingMultiplier = (initialDiminishingMultiplier + finalDiminishingMultiplier) / 2;

        // Calculate total power generated considering the average diminishing multiplier
        power += basePowerPerSecond * averageDiminishingMultiplier * elapsedSeconds;

    }

}

///// also apply diminishing scaling to knowledge







///// mini games soft caps:


// Function to play a mini-game of a given type
function playMiniGame(gameType) {
    // Check if the mini-game is on cooldown
    if (cooldowns[gameType]) return;

    // Get the button element for the mini-game
    const button = document.getElementById(`${gameType}Game`);
    button.disabled = true; // Disable the button at the start of the game
    button.classList.remove('affordable'); // Remove the 'affordable' class
    button.classList.add('disabled'); // Add the 'disabled' class to change its appearance

    // Convert mini-game timeouts from milliseconds to minutes for the message
    const cooldownMinutes = (miniGamerSkill ? miniGameTimeouts[gameType] * 0.75 : miniGameTimeouts[gameType]) / (60 * 1000);
    const cooldownMessage = (gameType === 'memory' || gameType === 'math') ? 
        `In ${cooldownMinutes} minutes, you get to test your ${gameType} skills again.` : 
        `In ${cooldownMinutes} minutes, you get to test your ${gameType} again.`;

    // Define the soft cap for each mini-game
    const softCaps = {
        speed: effectiveCopiumPerSecond * 12 * 60 * 60,  // 12 hours of copium per second
        memory: effectiveDelusionPerSecond * 12 * 60 * 60,  // 12 hours of delusion per second
        math: effectiveYachtMoneyPerSecond * 12 * 60 * 60,  // 12 hours of yacht money per second
        luck: effectiveTrollPointsPerSecond * 12 * 60 * 60  // 12 hours of troll points per second
    };

    let softCapReached = false;  // Variable to check if the soft cap is reached

    // Speed mini-game logic
    if (gameType === 'speed') {
        let points = 0;
        let duration = Math.floor(Math.random() * 5) + 2; // Random duration between 2 and 6 seconds

        // Show the modal and start the game when the modal is closed
        showMessageModal('Speed Game', `Tap on the screen as many times as you can in ${duration} seconds!`, false, false).then(() => {
            function clickHandler() {
                points++;
            }

            document.addEventListener('click', clickHandler); // Add click event listener
            document.addEventListener('touchstart', clickHandler); // Add touch event listener

            // End the game after the duration
            setTimeout(() => {
                document.removeEventListener('click', clickHandler); // Remove click event listener
                document.removeEventListener('touchstart', clickHandler); // Remove touch event listener
                
                let reward;
                let rewardPerClick;
                if (speedGameSkill) {
                    reward = Math.max(Math.floor(Math.abs(copium) * ((points - 3) * 0.025)), 25);
                } else {
                    let clicksPerSecond = points / duration;
                    if (clicksPerSecond > 3) {
                        reward = Math.max(Math.floor(Math.abs(copium) * ((clicksPerSecond - 3) * 0.025)), 25);
                    } else {
                        reward = -Math.max(Math.floor(Math.random() * Math.abs(copium) * 0.1), 10);
                    }
                }

                // Apply the soft cap
                if (reward > softCaps.speed) {
                    reward = softCaps.speed;
                    softCapReached = true;
                }

                copium += reward;
                let resultMessage = `You tapped ${points} times in ${duration} seconds. Your total reward is ${formatNumber(reward)} copium!`;

                // Add the soft cap message in orange if applicable
                if (softCapReached) {
                    resultMessage += '<br><span style="color: orange;">Soft cap reached: Maximum reward of 12 hours effective Copium applied.</span>';
                }

                showMessageModal('Speed Game Result', resultMessage, false, false, null, false, true);
                updateDisplay(); // Update the display
                startCooldown(gameType); // Start cooldown for the mini-game
            }, duration * 1000);
        });
    } 
    // Memory mini-game logic
    else if (gameType === 'memory') {
        let sequenceLength = Math.floor(Math.random() * 5) + 3; // Random length between 3 and 7
        let sequence = '';
        for (let i = 0; i < sequenceLength; i++) {
            sequence += Math.floor(Math.random() * 10); // Random digit between 0 and 9
        }
        let maxTimeout = memoryGameSkill ? 15 : 40; // Set maximum timeout based on memoryGameSkill
        let timeout = Math.floor(Math.random() * (maxTimeout - 5 + 1)) + 5; // Random timeout between 5 and maxTimeout seconds
        showMessageModal('Memory Game', `Remember this sequence: ${sequence}`).then(() => {
            setTimeout(() => {
                showMessageModal('Memory Game', 'Enter the sequence:', false, false, null, false, true).then(userSequence => {
                    let correct = userSequence === sequence;
                    let baseReward = correct ? Math.max(Math.floor(Math.abs(delusion) * 0.4), 25) : -Math.max(Math.floor(Math.random() * Math.abs(delusion) * 0.1), 10);
                    let reward = memoryGameSkill ? baseReward * 2 : baseReward; // Double the reward if memoryGameSkill is true
                    
                    // Apply the soft cap
                    if (reward > softCaps.memory) {
                        reward = softCaps.memory;
                        softCapReached = true;
                    }

                    delusion += reward;
                    let resultMessage = `You ${correct ? 'won' : 'lost'} and earned ${formatNumber(reward)} delusion!`;

                    // Add the soft cap message in orange if applicable
                    if (softCapReached) {
                        resultMessage += '<br><span style="color: orange;">Soft cap reached: Maximum reward of 12 hours effective Delusion applied.</span>';
                    }

                    showMessageModal('Memory Game Result', resultMessage);
                    updateDisplay(); // Update the display
                    startCooldown(gameType); // Start cooldown for the mini-game
                });
            }, timeout * 1000);
        });
    }
    // Math mini-game logic
    else if (gameType === 'math') {
        let num1 = Math.floor(Math.random() * 100) + 1;
        let num2 = Math.floor(Math.random() * 100) + 1;
        let num3 = Math.floor(Math.random() * 10) + 1;
        let operations = ['+', '-', '*', '/'];
        let op1 = operations[Math.floor(Math.random() * operations.length)];
        let op2 = operations[Math.floor(Math.random() * operations.length)];

        let question, correctAnswer;
        if (mathGameSkill) {
            // Only 2 numbers and 1 operation
            question = `${num1} ${op1} ${num2}`;
            correctAnswer = eval(question.replace('/', '* 1.0 /')); // Ensure floating point division
        } else {
            // Original question with 3 numbers and 2 operations
            question = `${num1} ${op1} ${num2} ${op2} ${num3}`;
            correctAnswer = eval(question.replace('/', '* 1.0 /')); // Ensure floating point division
        }

        // Record the start time
        const startTime = Date.now();

        showMessageModal('Math Game', `What is ${question}? (answer within 0.5 is acceptable; submit answer in 3 seconds or less to get triple reward)`, false, false, null, false, true).then(answer => {
            // Calculate the time difference in seconds
            const timeTaken = (Date.now() - startTime) / 1000;
            
            let isCorrect = Math.abs(Number(answer) - correctAnswer) < 0.5;
            let reward;
            let bonusMessage = '';

            if (mathGameSkill) {
                reward = isCorrect ? Math.max(Math.floor(Math.abs(yachtMoney) * 0.4), 50) : -Math.max(Math.floor(Math.random() * Math.abs(yachtMoney) * 0.2), 20);
            } else {
                reward = isCorrect ? Math.max(Math.floor(Math.abs(yachtMoney) * 0.2), 25) : -Math.max(Math.floor(Math.random() * Math.abs(yachtMoney) * 0.1), 10);
            }

            // If the answer was given within 3 seconds, apply 3x reward multiplier and set bonus message
            if (isCorrect && timeTaken <= 3) {
                reward *= 3;
                bonusMessage = `<br><span style="color: #66FF00;">You answered within 3 seconds and earned triple the reward!</span>`;
            }

            // Apply the soft cap
            if (reward > softCaps.math) {
                reward = softCaps.math;
                softCapReached = true;
            }

            yachtMoney += reward;
            let resultMessage = `You guessed ${answer} and the exact answer was ${correctAnswer}. You ${isCorrect ? 'won' : 'lost'} ${formatNumber(reward)} yachtMoney! ${cooldownMessage} ${bonusMessage}`;

            // Add the soft cap message in orange if applicable
            if (softCapReached) {
                resultMessage += '<br><span style="color: orange;">Soft cap reached: Maximum reward of 12 hours effective Yacht Money applied.</span>';
            }

            showMessageModal('Math Game Result', resultMessage);
            updateDisplay(); // Update the display
            startCooldown(gameType); // Start cooldown for the mini-game
        });
    }
    // Luck mini-game logic
    else if (gameType === 'luck') {
        let result = (Math.random() * 200) + luckGameDelta; // Generates a random number (initially between -75 and +125%)
        let message = "";
        let reward = Math.floor(Math.abs(trollPoints) * (result / 100)); // Calculate reward based on the result percentage
        let gainLossMessage = reward >= 0 ? "gained" : "lost";

        if (result > 100) {
            message = "SUPER LUCKY!!! 🍀🍀🍀";
        } else if (result > 75) {
            message = "Very Lucky!!";
        } else if (result > 0) {
            message = "Lucky!";
        } else if (result > -40) {
            message = "Unlucky!";
        } else {
            message = "Extremely Unlucky 😞😞😞";
        }

        // Apply the soft cap
        if (reward > softCaps.luck) {
            reward = softCaps.luck;
            softCapReached = true;
        }

        trollPoints += reward;
        let resultMessage = `You rolled ${result.toFixed(2)}%. ${message} You ${gainLossMessage} ${formatNumber(Math.abs(reward))} troll points! ${cooldownMessage}`;

        // Add the soft cap message in orange if applicable
        if (softCapReached) {
            resultMessage += '<br><span style="color: orange;">Soft cap reached: Maximum reward of 12 hours effective Troll Points applied.</span>';
        }

        showMessageModal('Luck Game Result', resultMessage);
        updateDisplay(); // Update the display
        startCooldown(gameType); // Start cooldown for the mini-game
    }
}









///// deadpool stuff


localStorage.setItem('deadPoolRevives', deadPoolRevives);


deadPoolRevives = parseFloat(localStorage.getItem('deadPoolRevives')) || 0;


///// in bigCrunch()
let deadpoolHint = '';

if (deadpoolRevives > 0 && !purchasedUpgrades.some(up => up.name === 'Deadpool')) {
    deadpoolHint = `<br><br><span style="color: #FFD700;">Your instincts hint that Big Crunch might also reset all of Deadpool's deaths...</span>`;
}

const confirmed = await showMessageModal(
    'Big Crunch Confirmation',
    `Are you sure you want to prestige? You will reset all resources, prestiges, and god-mode levels, but your Big Crunch Multiplier will increase <strong>from ${formatNumber(bigCrunchMultiplier)} to ${formatNumber(calculateBigCrunchMultiplier(power))}</strong>.<br> Big crunch multiplier stacks with all your other multipliers, plus additionally affects your Knowledge generation! (Your Big Crunch Power will lock in at the current Power level)` + deadpoolHint,
    true
);

//if confirmed
deadPoolRevives = 0;   